name: java application - main

on: 
  push:
    branches: 
      - main
      - testcode

jobs:
  java-demo:
    runs-on: ubuntu-latest
    

    steps:
    - name: Checkout repos
      uses: actions/checkout@v3
      with: 
        repository: 'AswinMN-1/test-repo-for-githubactions' 
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
         fetch-depth: 0

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
        
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
      
    - name: Build with Maven and Unit test cases
      run: |
        mvn -B package -Dmaven.test.skip --file pom.xml
        ls -lrt
        
    - name: Ready the springboot artifacts
      run:  |
        find -name '*.jar' -executable -type f  -exec zip release.zip {} + #build variable name changes.
        cd target
        ls -lrt
    - name: Upload jars to artifactory 
      run: |
        echo "successfully update jars to artifactory repo "
#    - name: Upload the springboot jars 
#      uses: actions/upload-artifact@v1
#      with:
#        name: release
#        path: ./release.zip

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
   
    - name: Unit Test
      run: |
        echo "Testing is completed"

    - name: Create Docker Image
      run: |
        echo "Docker image is created"
        # echo ${{ secrets.DEMO_MY_SECRET }} > secret.txt
        # echo ${{ secrets.DEMO_GITHUB_TOKEN }} > token.txt
        # echo ${{ secrets.DEMO_HOSTNAME }} > hostname.txt
        # docker build . -t ${{ secrets.DEMO_HOSTNAME }}/python-app:latest
        # docker login -u ${{ secrets.DEMO_HOSTNAME }} -p ${{ secrets.DEMO_GITHUB_TOKEN }}
        # docker push ${{ secrets.DEMO_HOSTNAME }}/python-app:latest

    - name: Push Docker image
      run: |
        echo "Docker file is pushed to docker registry"

    - name: Scan Docker image for vulneability
      run: |
        echo "Docker image is scanned"

    - name: Deploy to DEV
      run: |
        echo "Deployed to DEV environment"
        # kubectl apply -f deployment.yaml

    - name: Deploy to ST
      run: |
          echo "Deployed to ST environment"
          # kubectl apply -f deployment.yaml

    - name: Deploy to SIT
      run: |
          echo "Deployed to SIT environment"
          # kubectl apply -f deployment.yaml

    - name: Deploy to UAT
      run: |
        echo "Deployed to UAT environment"
        # kubectl apply -f deployment.yaml

    - name: Validate deployment file
      run: |
        echo "Deployment file is validated"  
      # kubectl apply -f deployment.yaml --dry-run=client 

    - name: Check deployment status
      run: |
        echo "Deployment status is ok"
        # kubectl get deployment

    - name: Check pod status
      run: |
        echo "Pod Status is ok"
        # kubectl get pods
    
    - name: Check service status
      run: |
        echo "Service is up and running"
        # kubectl get svc

    - name: Run Twistlock scan
      run: |
        echo "Running Twistlock scan"
        echo "Twistlock scan completed"

    
